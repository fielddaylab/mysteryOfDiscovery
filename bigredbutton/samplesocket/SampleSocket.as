package {	import flash.net.*;	import flash.display.MovieClip;	import flash.events.*;	import flash.utils.Timer;	public class SampleSocket extends MovieClip{		var socket:Socket;		var reconnectTimer:Timer;		var responseTimer:Timer;		var responseMessage:String;		var connected:Boolean = false;		var host:String = "doit-arduino.doit.wisc.edu";		var port:uint = 8080;				public function SampleSocket() {			vid.stop();			socket = new Socket();			socket.connect(host, port);			socket.addEventListener(Event.CONNECT, connectHandler);			socket.addEventListener(ProgressEvent.SOCKET_DATA, recieveHandler);			socket.addEventListener(Event.CLOSE, closeHandler);			socket.addEventListener(IOErrorEvent.IO_ERROR, err);						reconnectTimer = new Timer(5000,1);			reconnectTimer.addEventListener(TimerEvent.TIMER_COMPLETE, reconnect);			responseTimer = new Timer(100,1)			responseTimer.addEventListener(TimerEvent.TIMER_COMPLETE, responseComplete);		}				public function connectHandler(evt:Event):void {			trace("Connected...");			connected = true;			socket.writeUTFBytes("Flash Connected\n");			socket.flush();			responseMessage="";		}		public function recieveHandler(evt:Event):void {			//trace(".");			try{			responseMessage+=socket.readUTFBytes(socket.bytesAvailable)			responseTimer.stop();			responseTimer.start();			}			catch(e:Error){				trace("weird read");			}		}		public function closeHandler(evt:Event):void {			trace("Closed- attempting reconnect:");			connected = false;			reconnect(null);		}		public function reconnect(evt:Event):void {			socket.connect(host,port);			trace("Attempting reconnect...");			if(!connected){				reconnectTimer.start();			}		}		public function responseComplete(evt:Event):void {			//Normalizing input			responseMessage = responseMessage.replace (/\s*\R/g, "\n");  			responseMessage = responseMessage.replace (/^\s*|[\t ]+$/gm, "");			responseMessage = responseMessage.replace (/\R$/, "");						trace(responseMessage);			if(parseHTTP(responseMessage) == "FTW") fireVideo();			responseMessage = "";		}		public function parseHTTP(str:String):String {			if(str.slice(0,5) != "GET /") return str;			closeHTTPCon();			return(str.slice(5, str.indexOf("HTTP/",0)-1));		}		public function closeHTTPCon():void {			socket.writeUTFBytes("HTTP Request Complete\n");			socket.flush();		}		public function fireVideo():void {			trace("IMMA FIRIN' MAH VIDEO!");			vid.play();		}		public function err(evt:Event):void {			trace("Error");		}	}}